1、
(function() {
    //函数表达式
    //var Obj = function () {
    //};
    //函数声明
    function Obj() {}
    Obj.prototype = {
        _name: '01',
        setName: function(name) {
            this._name = name;
        }
    };
    var obj = new Obj();
    var obj0 = new Obj();
    console.dir(obj); //01 setName
    console.dir(obj0); //01 setName
    console.log(obj.hasOwnProperty('_name')); //false
    console.log(obj.hasOwnProperty('setName')); //false
    console.log(obj0.hasOwnProperty('_name')); //false
    console.log(obj0.hasOwnProperty('setName')); //false
    obj.setName('02');
    console.dir(obj); //02 setName
    console.dir(obj0); //01 setName
    console.log(obj.hasOwnProperty('_name')); //true
    console.log(obj.hasOwnProperty('setName')); //false
    console.log(obj0.hasOwnProperty('_name')); //false
    console.log(obj0.hasOwnProperty('setName')); //false
})();

2、扩展Array，增加forEach、map、filter、indexOf、lastIndexOf方法
Array.prototype.forEach = function(fn, context) {
    if (typeof fn !== 'function') {
        return;
    }
    var len = this.length,
    i;
    for (i = 0; i < len; i++) {
        if (Object.prototype.hasOwnProperty.call(this, i)) {
            fn.call(context, this[i], i, this);
        }
    }
}
Array.prototype.map = function(fn, context) {
    var len = this.length,
    arr = [],
    i;
    if (typeof fn === 'function') {
        for (i = 0; i < len; i++) {
            arr.push(fn.call(context, this[i], i, this));
        }
    }
    return arr;
}
Array.prototype.filter = function(fn, context) {
    var len = this.length,
    arr = [],
    i;
    if (typeof fn === 'function') {
        for (i = 0; i < len; i++) {
            fn.call(context, this[i], i, this) && arr.push(this[i]);
        }
    }
    return arr;
}
Array.prototype.indexOf = function(searchElement, fromIndex) {
    var index = -1,
    len = this.length,
    i;
    fromIndex = fromIndex * 1 || 0;
    for (i = 0; (i < len) && (index === -1); i++) {
        if (i >= fromIndex && this[i] === searchElement) {
            index = i;
        }
    }
    return index;
}
Array.prototype.lastIndexOf = function(searchElement, fromIndex) {
    var index = -1,
    len = this.length,
    i;
    fromIndex = fromIndex * 1 || len - 1;
    for (i = len - 1; (i > -1) && (index === -1); i--) {
        if (i <= fromIndex && this[i] === searchElement) {
            index = i;
        }
    }
    return index;
}

3、Function.prototype
(function () {
  //通过给Function.prototype增加方法来使得该方法对所有函数可用
  Function.prototype.method = function (name, func) {
     if (!this.prototype[name]) {
      this.prototype[name] = func;
    }
  };
  //数字取整
  Number.method('integer', function () {
    return Math[this < 0 ? 'ceil' : 'floor'](this);
  });
  //字符串去除左右空格
  String.method('trim', function () {
    return this.replace(/^\s+|\s+$/g, '');
  });
  console.log(( - 10 / 3).integer());
  var str = ' ab          ';
  console.log(str.length);
  console.log(str.trim().length);
}) ();

